%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Programming/Coding Assignment
% LaTeX Template
%
% This template has been downloaded from:
% http://www.latextemplates.com
%
% Original author:
% Ted Pavlic (http://www.tedpavlic.com)
%
% Note:
% The \lipsum[#] commands throughout this template generate dummy text
% to fill the template out. These commands should all be removed when 
% writing assignment content.
%
% This template uses a Perl script as an example snippet of code, most other
% languages are also usable. Configure them in the "CODE INCLUSION 
% CONFIGURATION" section.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%----------------------------------------------------------------------------------------
%	PACKAGES AND OTHER DOCUMENT CONFIGURATIONS
%----------------------------------------------------------------------------------------

\documentclass{article}

\usepackage{fancyhdr} % Required for custom headers
\usepackage{lastpage} % Required to determine the last page for the footer
\usepackage{extramarks} % Required for headers and footers
\usepackage[usenames,dvipsnames]{color} % Required for custom colors
\usepackage{graphicx} % Required to insert images
\usepackage{listings} % Required for insertion of code
\usepackage{courier} % Required for the courier font
\usepackage{lipsum} % Used for inserting dummy 'Lorem ipsum' text into the template


 % Highlighting individual words
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\newcommand{\hilight}[1]{\colorbox{lightgray}{#1}}

% Margins
\topmargin=-0.45in
\evensidemargin=0in
\oddsidemargin=0in
\textwidth=6.5in
\textheight=9.0in
\headsep=0.25in

\linespread{1.1} % Line spacing

% Set up the header and footer
\pagestyle{fancy}
\lhead{\hmwkAuthorName} % Top left header
\chead{\hmwkClass\ \hmwkTitle} % Top center head
% \chead{\hmwkClass\ (\hmwkClassInstructor\ \hmwkClassTime): \hmwkTitle} % Top center head
\rhead{\hmwkDueDate} % Top right header
% \rhead{\firstxmark} % Top right header


\lfoot{\lastxmark} % Bottom left footer
\cfoot{} % Bottom center footer
\rfoot{Page\ \thepage\ of\ \protect\pageref{LastPage}} % Bottom right footer
\renewcommand\headrulewidth{0.4pt} % Size of the header rule
\renewcommand\footrulewidth{0.4pt} % Size of the footer rule

\setlength\parindent{0pt} % Removes all indentation from paragraphs

%----------------------------------------------------------------------------------------
%	CODE INCLUSION CONFIGURATION
%----------------------------------------------------------------------------------------

\definecolor{MyDarkGreen}{rgb}{0.0,0.4,0.0} % This is the color used for comments
\lstloadlanguages{Perl} % Load Perl syntax for listings, for a list of other languages supported see: ftp://ftp.tex.ac.uk/tex-archive/macros/latex/contrib/listings/listings.pdf
\lstset{language=Perl, % Use Perl in this example
        frame=single, % Single frame around code
        basicstyle=\small\ttfamily, % Use small true type font
        keywordstyle=[1]\color{Blue}\bf, % Perl functions bold and blue
        keywordstyle=[2]\color{Purple}, % Perl function arguments purple
        keywordstyle=[3]\color{Blue}\underbar, % Custom functions underlined and blue
        identifierstyle=, % Nothing special about identifiers                                         
        commentstyle=\usefont{T1}{pcr}{m}{sl}\color{MyDarkGreen}\small, % Comments small dark green courier font
        stringstyle=\color{Purple}, % Strings are purple
        showstringspaces=false, % Don't put marks in string spaces
        tabsize=5, % 5 spaces per tab
        %
        % Put standard Perl functions not included in the default language here
        morekeywords={rand},
        %
        % Put Perl function parameters here
        morekeywords=[2]{on, off, interp},
        %
        % Put user defined functions here
        morekeywords=[3]{test},
       	%
        morecomment=[l][\color{Blue}]{...}, % Line continuation (...) like blue comment
        numbers=left, % Line numbers on left
        firstnumber=1, % Line numbers start with line 1
        numberstyle=\tiny\color{Blue}, % Line numbers are blue and small
        stepnumber=5 % Line numbers go in steps of 5
}

% Creates a new command to include a perl script, the first parameter is the filename of the script (without .pl), the second parameter is the caption
\newcommand{\perlscript}[2]{
\begin{itemize}
\item[]\lstinputlisting[caption=#2,label=#1]{#1.pl}
\end{itemize}
}

%----------------------------------------------------------------------------------------
%	DOCUMENT STRUCTURE COMMANDS
%	Skip this unless you know what you're doing
%----------------------------------------------------------------------------------------

% Header and footer for when a page split occurs within a problem environment
\newcommand{\enterProblemHeader}[1]{
\nobreak\extramarks{#1}{#1 continued on next page\ldots}\nobreak
\nobreak\extramarks{#1 (continued)}{#1 continued on next page\ldots}\nobreak
}

% Header and footer for when a page split occurs between problem environments
\newcommand{\exitProblemHeader}[1]{
\nobreak\extramarks{#1 (continued)}{#1 continued on next page\ldots}\nobreak
\nobreak\extramarks{#1}{}\nobreak
}

\setcounter{secnumdepth}{0} % Removes default section numbers
\newcounter{homeworkProblemCounter} % Creates a counter to keep track of the number of problems

\newcommand{\homeworkProblemName}{}
\newenvironment{homeworkProblem}[1][Problem \arabic{homeworkProblemCounter}]{ % Makes a new environment called homeworkProblem which takes 1 argument (custom name) but the default is "Problem #"
\stepcounter{homeworkProblemCounter} % Increase counter for number of problems
\renewcommand{\homeworkProblemName}{\arabic{homeworkProblemCounter}. #1} % Assign \homeworkProblemName the name of the problem
\section{\homeworkProblemName} % Make a section in the document with the custom problem count
\enterProblemHeader{\homeworkProblemName} % Header and footer within the environment
}{
\exitProblemHeader{\homeworkProblemName} % Header and footer after the environment
}

\newcommand{\problemAnswer}[1]{ % Defines the problem answer command with the content as the only argument
\noindent\framebox[\columnwidth][c]{\begin{minipage}{0.98\columnwidth}#1\end{minipage}} % Makes the box around the problem answer and puts the content inside
}

\newcommand{\homeworkSectionName}{}
\newenvironment{homeworkSection}[1]{ % New environment for sections within homework problems, takes 1 argument \item the name of the section
\renewcommand{\homeworkSectionName}{#1} % Assign \homeworkSectionName to the name of the section from the environment argument
\subsection{\homeworkSectionName} % Make a subsection with the custom name of the subsection
\enterProblemHeader{\homeworkProblemName\ [\homeworkSectionName]} % Header and footer within the environment
}{
\enterProblemHeader{\homeworkProblemName} % Header and footer after the environment
}

%----------------------------------------------------------------------------------------
%	NAME AND CLASS SECTION
%----------------------------------------------------------------------------------------

% \newcommand{\hmwkTitle}{Assignment\ \#1} % Assignment title
% \newcommand{\hmwkDueDate}{Monday,\ January\ 1,\ 2012} % Due date
% \newcommand{\hmwkClass}{COMPSCI\ 101} % Course/class
% \newcommand{\hmwkClassTime}{10:30am} % Class/lecture time
% \newcommand{\hmwkClassInstructor}{Jones} % Teacher/lecturer
% \newcommand{\hmwkAuthorName}{John Smith} % Your name

\newcommand{\hmwkTitle}{} % Assignment title
\newcommand{\hmwkDueDate}{May 2014} % Due date
\newcommand{\hmwkClass}{Python Course tasks: Python} % Course/class
\newcommand{\hmwkClassTime}{} % Class/lecture time
\newcommand{\hmwkClassInstructor}{} % Teacher/lecturer
\newcommand{\hmwkAuthorName}{Andreas Weller} % Your name

%----------------------------------------------------------------------------------------
%	TITLE PAGE
%----------------------------------------------------------------------------------------

\title{
\vspace{2in}
\textmd{\textbf{\hmwkClass:\ \hmwkTitle}}\\
\normalsize\vspace{0.1in}\small{Due\ on\ \hmwkDueDate}\\
\vspace{0.1in}\large{\textit{\hmwkClassInstructor\ \hmwkClassTime}}
\vspace{3in}
}

\author{\textbf{\hmwkAuthorName}}
\date{} % Insert date here if you want it to appear below your name

%----------------------------------------------------------------------------------------

\begin{document}

% \maketitle

%----------------------------------------------------------------------------------------
%	TABLE OF CONTENTS
%----------------------------------------------------------------------------------------

%\setcounter{tocdepth}{1} % Uncomment this line if you don't want subsections listed in the ToC
% 
% \newpage
% \tableofcontents
% \newpage

%----------------------------------------------------------------------------------------
%	PROBLEM 1
%----------------------------------------------------------------------------------------

% To have just one problem per page, simply put a \clearpage after each problem

\begin{homeworkProblem}[Numbers]
\begin{enumerate}
\item Open the python shell by typing \hilight{python}
\item Try using the shell as a calculator
\item Try \hilight{10/3}
\item Try \hilight{10/3.0} 
\item Whats the type of \hilight{10}? Of \hilight{10.0}?
\end{enumerate}
\end{homeworkProblem}

\begin{homeworkProblem}[Booleans]
\begin{enumerate}
\item Try the $>$, =, $<$ operators
\item Can you compare a string to a float?
\item Type \hilight{a = 3}. Now type \hilight{a}. What's the type of \hilight{a}?
\item Type \hilight{b = 3 > 2}. Now type \hilight{b}. What's the type of \hilight{b}?
\item What's the difference between \hilight{a = 3} and \hilight{a == 3}?
\item Try \hilight{c == 10}. What happens? Why?
\item Type \hilight{c = 5}, then again \hilight{c == 10}. What happens now?
\end{enumerate}
\end{homeworkProblem}

\begin{homeworkProblem}[Strings I]
\begin{enumerate}
\item Whats the difference between \hilight{"a"} and \hilight{a}?
\item Try \hilight{a = "Python"}, then \hilight{b = "Course"}, then \hilight{c = a + b}
\item Whats the result of \hilight{"on" in c}? \hilight{"Course1" in c}?
\item Try slicing on the previous variable c. Whats c[-1]? How do you get "Py"? "course"? "Ptocus"?
\end{enumerate}
\end{homeworkProblem}


\begin{homeworkProblem}[Strings II]
\begin{enumerate}
\item Try the string methods. What happends if you forget the brackets? 
\item BONUS: \hilight{d = "python"}. \\How do you change d to "Python" in one command using slicing and string methods? \\
Remember that you can add strings with "+" and generally combine almost all operations with each other  
\end{enumerate}
\end{homeworkProblem}

\begin{homeworkProblem}[Lists]
Remember the difference between a variable and a string!
\begin{enumerate}
\item Create a list of fruits in the python shell e.g \hilight{fruits = ["apple", "apple", "orange", "banana"]}
\item Try the slicing operations you learned for strings. 
\item Try the "x in y" comparison to test if a fruit is in your list or not.
\item How do you include "pineapple" in your list?
\item Try to join your list into a long string using e.g. \hilight{ "-".join(fruits) }
\item Count the amount of apples in your list
\item BONUS: Create a second list of veggies. How do you combine the lists into one?
\end{enumerate}
\end{homeworkProblem}


\begin{homeworkProblem}[Dictionaries]
Remember the different types of brackets!
\begin{enumerate}
\item Create a dict of students and their grades \hilight{ \{"Tom":"A", "John":"C", "Martin":"F-"\} }
\item Which are the keys and which are the values? What's the difference?
\item Retrieve the grade for Martin using dict[key].  
\item Add new student "Andreas" who has the grade "A". Print the dict.
\item Add another student called "John" who has the grade "A". Print the dict. What happened? 
\item BONUS: Find out how many students have the grade "A".
\end{enumerate}
\end{homeworkProblem}


\begin{homeworkProblem}[Simple scripting]
\begin{enumerate}
\item Open your text editor of choice.
\item Write \hilight{print "Hello World!"}
\item Save as hello\_world.py
\item In the terminal: Make sure you are in the same folder as the file.
\item Type \hilight{python hello\_world.py}. Congratulations!
\end{enumerate}
\end{homeworkProblem}


\begin{homeworkProblem}[For loops]
Remember the indentation!
\begin{enumerate}
\item Go back to you Hello\_World.py script. Save a copy as hello\_world\_for\_loop.py.
\item Create a list of people. Print each name using a for-loop.
\item BONUS: Have the script individually say hello e.g. "Hello Tom!", "Hello John!" etc. using string substitution. 
\end{enumerate}
\end{homeworkProblem}

% 
% \begin{homeworkProblem}[While loops]
% Remember: an numerical variable can be increased by e.g. \hilight{a += 1}!
% \begin{enumerate}
% \item Go back to your Hello\_World.py script. Save a copy as hello\_world\_while\_loop.py
% \item Introduce a counter variable that starts at 0, e.g \hilight{counter = 0}.
% \item Create a while loop that prints "Hello World!" until the counter has reached 10. 
% \end{enumerate}
% \end{homeworkProblem}


\begin{homeworkProblem}[File input and output]
% Remember: an numerical variable can be increased by e.g. \hilight{a += 1}!
\begin{enumerate}
\item Write a simple replacement for "grep". Hints: open a file, iterate over the rows, check for you search term, print row if found.
\item BONUS: Have the script print the row number of each output row together with the row.\\ Hint: a numerical variable can be increased by e.g. \hilight{a += 1}!
\end{enumerate}
\end{homeworkProblem}
 

\begin{homeworkProblem}[Modules]
\begin{enumerate}
\item Extend your grep script to accept the search term as a commandline argument.
\item BONUS: Have the script find out if the user gave an argument and use a default search term if he didn't.
Hint: the arguments are parsed into a list, you can find out the length of a list with len(list). 
\end{enumerate}
\end{homeworkProblem}

\begin{homeworkProblem}[Real world example]
Many basic bioinformatics tasks involve reading information from one or more files, performing some kind of filtering or comparison and writing the results into
another file. In this example, imagine you have a huge list of variants and a colleague asks you to prepare a smaller list of good variants in her favorite gene. 
\newline
\newline
We will try such a task using our "quasar.tsv" file from the Bash exercise. Build your code slowly by testing if each row you write does what you think it does (use a \hilight{print} statement that you delete later). Try to get each task right before moving on to the next.

\begin{enumerate}
\item Write a script to read the quasar file and print all rows.
\item Only show rows in TP53. Hint: you can test if a string contains another string with \hilight{X in Y}.  
\item Only show rows with a quality above 40. Hint: you need to transform the QC column into a variable of the right type. 
\item Use your bash skills to cross-check the number of rows found by Python and by a bash pipe. Do they match?
\item Output your results into a new file using the write() method. You could of course use a "$>$" on the shell, but don't be lazy! 
\item BONUS 1: Parse the name of a target gene using the sys.argv[] method, e.g. TP53. Then find the rows for this gene and write them into an output with a custom name of the format "variants\_in\_GENENAME.tsv" e.g. "variants\_in\_TP53.tsv". 
\item BONUS 2: Only show rows with genes present in the file "target\_genes.txt". Hint: you need to first parse these genes into the proper Python data structure. Then you can use it to test if a row contains a target gene or not.
\item BONUS 3: Combine Bonus 1 and 2 to automatically create a matching output file for each of the target genes.
\end{enumerate}
\end{homeworkProblem}


\end{document}
